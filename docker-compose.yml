version: "3.8"
services:
  # MongoDB Service
  mongo:
    image: mongo:6.0.12
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DATABASE_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongo:/data/db
      - mongoConf:/data/configdb

  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitMQData:/var/lib/rabbitmq/
      - rabbitMQLogs:/var/log/rabbitmq/
    environment:
      RABBITMQ_DEFAULT_USER: ${MESSAGE_BROKER_USER}
      RABBITMQ_DEFAULT_PASS: ${MESSAGE_BROKER_PASSWORD}

  order-management-ui:
    restart: always
    build:
      context: ./order-management-ui
      dockerfile: Dockerfile.dev
      args:
        VITE_RESTAURANT_ORDER_SYSTEM_DOMAIN: ${VITE_RESTAURANT_ORDER_SYSTEM_DOMAIN}
    ports:
      - "3000:3000" # Map port 3000 of the container to port 80 on the host
    volumes:
      - ./order-management-ui:/app
      - /app/node_modules
    command: npm run dev

  kitchen-service:
    restart: always
    build:
      context: ./kitchen-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Map port 8080 of the container to port 8080 on the host
    environment:
      - NODE_ENV=${NODE_ENV}
      - RESTAURANT_ORDER_SYSTEM_DOMAIN=${RESTAURANT_ORDER_SYSTEM_DOMAIN}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_NAME=${DATABASE_NAME}
      - MESSAGE_BROKER_USER=${MESSAGE_BROKER_USER}
      - MESSAGE_BROKER_PASSWORD=${MESSAGE_BROKER_PASSWORD}
      - MESSAGE_BROKER_HOST=${MESSAGE_BROKER_HOST}
      - MESSAGE_BROKER_PORT=${MESSAGE_BROKER_PORT}
      - INGREDIENTS_CHECK_QUEUE=${INGREDIENTS_CHECK_QUEUE}
    volumes:
      - ./kitchen-service:/app
    command: npm run dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_started

  warehouse-service:
    restart: always
    build:
      context: ./warehouse-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081" # Map port 8080 of the container to port 8081 on the host
    environment:
      - NODE_ENV=${NODE_ENV}
      - RESTAURANT_ORDER_SYSTEM_DOMAIN=${RESTAURANT_ORDER_SYSTEM_DOMAIN}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_NAME=${DATABASE_NAME}
      - MESSAGE_BROKER_USER=${MESSAGE_BROKER_USER}
      - MESSAGE_BROKER_PASSWORD=${MESSAGE_BROKER_PASSWORD}
      - MESSAGE_BROKER_HOST=${MESSAGE_BROKER_HOST}
      - MESSAGE_BROKER_PORT=${MESSAGE_BROKER_PORT}
      - INGREDIENTS_CHECK_QUEUE=${INGREDIENTS_CHECK_QUEUE}
    volumes:
      - ./warehouse-service:/app
    command: npm run dev
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_started

volumes:
  mongo:
  mongoConf:
  rabbitMQData:
  rabbitMQLogs:
